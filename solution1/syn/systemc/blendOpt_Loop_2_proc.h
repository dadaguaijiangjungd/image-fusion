// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _blendOpt_Loop_2_proc_HH_
#define _blendOpt_Loop_2_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "write_r.h"
#include "blendTop_mul_mul_Ffa.h"

namespace ap_rtl {

struct blendOpt_Loop_2_proc : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<9> > imageA_rows_load3_loc_dout;
    sc_in< sc_logic > imageA_rows_load3_loc_empty_n;
    sc_out< sc_logic > imageA_rows_load3_loc_read;
    sc_in< sc_lv<10> > imageA_cols_load4_loc_dout;
    sc_in< sc_logic > imageA_cols_load4_loc_empty_n;
    sc_out< sc_logic > imageA_cols_load4_loc_read;
    sc_in< sc_lv<8> > p_imageS_out_V_V_dout;
    sc_in< sc_logic > p_imageS_out_V_V_empty_n;
    sc_out< sc_logic > p_imageS_out_V_V_read;
    sc_out< sc_lv<8> > imageS_data_V_din;
    sc_in< sc_logic > imageS_data_V_full_n;
    sc_out< sc_logic > imageS_data_V_write;


    // Module declarations
    blendOpt_Loop_2_proc(sc_module_name name);
    SC_HAS_PROCESS(blendOpt_Loop_2_proc);

    ~blendOpt_Loop_2_proc();

    sc_trace_file* mVcdFile;

    write_r* call_ln496_write_r_fu_81;
    blendTop_mul_mul_Ffa<1,1,10,9,19>* blendTop_mul_mul_Ffa_U225;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > imageA_rows_load3_loc_blk_n;
    sc_signal< sc_logic > imageA_cols_load4_loc_blk_n;
    sc_signal< sc_logic > p_imageS_out_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln488_reg_127;
    sc_signal< sc_logic > call_ln496_write_r_fu_81_Mat_0_480_640_1_data_V_addr_blk_n;
    sc_signal< sc_logic > imageS_data_V_blk_n;
    sc_signal< sc_lv<19> > indvar_flatten_reg_70;
    sc_signal< sc_lv<9> > imageA_rows_load3_lo_reg_112;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<10> > imageA_cols_load4_lo_reg_117;
    sc_signal< sc_lv<19> > bound_fu_106_p2;
    sc_signal< sc_lv<19> > bound_reg_122;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln488_fu_95_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<19> > add_ln488_fu_100_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > call_ln496_write_r_fu_81_ap_start;
    sc_signal< sc_logic > call_ln496_write_r_fu_81_ap_done;
    sc_signal< sc_logic > call_ln496_write_r_fu_81_ap_idle;
    sc_signal< sc_logic > call_ln496_write_r_fu_81_ap_ready;
    sc_signal< sc_lv<8> > call_ln496_write_r_fu_81_Mat_0_480_640_1_data_V_addr_din;
    sc_signal< sc_logic > call_ln496_write_r_fu_81_Mat_0_480_640_1_data_V_addr_write;
    sc_signal< sc_logic > call_ln496_write_r_fu_81_ap_ce;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0_ignore_call4;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1_ignore_call4;
    sc_signal< bool > ap_block_pp0_stage0_11001_ignoreCallOp24;
    sc_signal< sc_logic > call_ln496_write_r_fu_81_ap_start_reg;
    sc_signal< sc_lv<10> > bound_fu_106_p0;
    sc_signal< sc_lv<9> > bound_fu_106_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<19> > bound_fu_106_p00;
    sc_signal< sc_lv<19> > bound_fu_106_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<19> ap_const_lv19_0;
    static const sc_lv<19> ap_const_lv19_1;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln488_fu_100_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_11001_ignoreCallOp24();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter0_ignore_call4();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter1_ignore_call4();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_bound_fu_106_p0();
    void thread_bound_fu_106_p00();
    void thread_bound_fu_106_p1();
    void thread_bound_fu_106_p10();
    void thread_call_ln496_write_r_fu_81_ap_ce();
    void thread_call_ln496_write_r_fu_81_ap_start();
    void thread_icmp_ln488_fu_95_p2();
    void thread_imageA_cols_load4_loc_blk_n();
    void thread_imageA_cols_load4_loc_read();
    void thread_imageA_rows_load3_loc_blk_n();
    void thread_imageA_rows_load3_loc_read();
    void thread_imageS_data_V_blk_n();
    void thread_imageS_data_V_din();
    void thread_imageS_data_V_write();
    void thread_p_imageS_out_V_V_blk_n();
    void thread_p_imageS_out_V_V_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
