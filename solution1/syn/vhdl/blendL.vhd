-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity blendL is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    pyrLA0_rows_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    pyrLA0_rows_empty_n : IN STD_LOGIC;
    pyrLA0_rows_read : OUT STD_LOGIC;
    pyrLA0_cols_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    pyrLA0_cols_empty_n : IN STD_LOGIC;
    pyrLA0_cols_read : OUT STD_LOGIC;
    pyrLA0_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    pyrLA0_data_V_empty_n : IN STD_LOGIC;
    pyrLA0_data_V_read : OUT STD_LOGIC;
    pyrLA1_rows_dout : IN STD_LOGIC_VECTOR (8 downto 0);
    pyrLA1_rows_empty_n : IN STD_LOGIC;
    pyrLA1_rows_read : OUT STD_LOGIC;
    pyrLA1_cols_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    pyrLA1_cols_empty_n : IN STD_LOGIC;
    pyrLA1_cols_read : OUT STD_LOGIC;
    pyrLA1_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    pyrLA1_data_V_empty_n : IN STD_LOGIC;
    pyrLA1_data_V_read : OUT STD_LOGIC;
    pyrLB0_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    pyrLB0_data_V_empty_n : IN STD_LOGIC;
    pyrLB0_data_V_read : OUT STD_LOGIC;
    pyrLB1_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    pyrLB1_data_V_empty_n : IN STD_LOGIC;
    pyrLB1_data_V_read : OUT STD_LOGIC;
    pyrS0_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    pyrS0_data_V_full_n : IN STD_LOGIC;
    pyrS0_data_V_write : OUT STD_LOGIC;
    pyrS1_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    pyrS1_data_V_full_n : IN STD_LOGIC;
    pyrS1_data_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of blendL is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal blendL_entry126_U0_ap_start : STD_LOGIC;
    signal blendL_entry126_U0_ap_done : STD_LOGIC;
    signal blendL_entry126_U0_ap_continue : STD_LOGIC;
    signal blendL_entry126_U0_ap_idle : STD_LOGIC;
    signal blendL_entry126_U0_ap_ready : STD_LOGIC;
    signal blendL_entry126_U0_pyrLA0_rows_read : STD_LOGIC;
    signal blendL_entry126_U0_pyrLA0_cols_read : STD_LOGIC;
    signal blendL_entry126_U0_pyrLA1_rows_read : STD_LOGIC;
    signal blendL_entry126_U0_pyrLA1_cols_read : STD_LOGIC;
    signal blendL_entry126_U0_pyrLA0_rows_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal blendL_entry126_U0_pyrLA0_rows_out_write : STD_LOGIC;
    signal blendL_entry126_U0_pyrLA0_cols_out_din : STD_LOGIC_VECTOR (10 downto 0);
    signal blendL_entry126_U0_pyrLA0_cols_out_write : STD_LOGIC;
    signal blendL_entry126_U0_pyrLA1_rows_out_din : STD_LOGIC_VECTOR (8 downto 0);
    signal blendL_entry126_U0_pyrLA1_rows_out_write : STD_LOGIC;
    signal blendL_entry126_U0_pyrLA1_cols_out_din : STD_LOGIC_VECTOR (9 downto 0);
    signal blendL_entry126_U0_pyrLA1_cols_out_write : STD_LOGIC;
    signal blendOpt_480_640_83_U0_imageA_rows_read : STD_LOGIC;
    signal blendOpt_480_640_83_U0_imageA_cols_read : STD_LOGIC;
    signal blendOpt_480_640_83_U0_imageA_data_V_read : STD_LOGIC;
    signal blendOpt_480_640_83_U0_imageB_data_V_read : STD_LOGIC;
    signal blendOpt_480_640_83_U0_imageS_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal blendOpt_480_640_83_U0_imageS_data_V_write : STD_LOGIC;
    signal blendOpt_480_640_83_U0_ap_start : STD_LOGIC;
    signal blendOpt_480_640_83_U0_ap_done : STD_LOGIC;
    signal blendOpt_480_640_83_U0_ap_ready : STD_LOGIC;
    signal blendOpt_480_640_83_U0_ap_idle : STD_LOGIC;
    signal blendOpt_480_640_83_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal blendOpt_480_640_U0_imageA_rows_read : STD_LOGIC;
    signal blendOpt_480_640_U0_imageA_cols_read : STD_LOGIC;
    signal blendOpt_480_640_U0_imageA_data_V_read : STD_LOGIC;
    signal blendOpt_480_640_U0_imageB_data_V_read : STD_LOGIC;
    signal blendOpt_480_640_U0_imageS_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal blendOpt_480_640_U0_imageS_data_V_write : STD_LOGIC;
    signal blendOpt_480_640_U0_ap_start : STD_LOGIC;
    signal blendOpt_480_640_U0_ap_done : STD_LOGIC;
    signal blendOpt_480_640_U0_ap_ready : STD_LOGIC;
    signal blendOpt_480_640_U0_ap_idle : STD_LOGIC;
    signal blendOpt_480_640_U0_ap_continue : STD_LOGIC;
    signal pyrLA0_rows_c_i_full_n : STD_LOGIC;
    signal pyrLA0_rows_c_i_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal pyrLA0_rows_c_i_empty_n : STD_LOGIC;
    signal pyrLA0_cols_c_i_full_n : STD_LOGIC;
    signal pyrLA0_cols_c_i_dout : STD_LOGIC_VECTOR (10 downto 0);
    signal pyrLA0_cols_c_i_empty_n : STD_LOGIC;
    signal pyrLA1_rows_c_i_full_n : STD_LOGIC;
    signal pyrLA1_rows_c_i_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal pyrLA1_rows_c_i_empty_n : STD_LOGIC;
    signal pyrLA1_cols_c_i_full_n : STD_LOGIC;
    signal pyrLA1_cols_c_i_dout : STD_LOGIC_VECTOR (9 downto 0);
    signal pyrLA1_cols_c_i_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_blendL_entry126_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_blendL_entry126_U0_ap_ready : STD_LOGIC;
    signal blendL_entry126_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_blendOpt_480_640_83_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_blendOpt_480_640_83_U0_ap_ready : STD_LOGIC;
    signal blendOpt_480_640_83_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_blendOpt_480_640_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_blendOpt_480_640_U0_ap_ready : STD_LOGIC;
    signal blendOpt_480_640_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal blendL_entry126_U0_start_full_n : STD_LOGIC;
    signal blendL_entry126_U0_start_write : STD_LOGIC;
    signal blendOpt_480_640_83_U0_start_full_n : STD_LOGIC;
    signal blendOpt_480_640_83_U0_start_write : STD_LOGIC;
    signal blendOpt_480_640_U0_start_full_n : STD_LOGIC;
    signal blendOpt_480_640_U0_start_write : STD_LOGIC;

    component blendL_entry126 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pyrLA0_rows_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        pyrLA0_rows_empty_n : IN STD_LOGIC;
        pyrLA0_rows_read : OUT STD_LOGIC;
        pyrLA0_cols_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        pyrLA0_cols_empty_n : IN STD_LOGIC;
        pyrLA0_cols_read : OUT STD_LOGIC;
        pyrLA1_rows_dout : IN STD_LOGIC_VECTOR (8 downto 0);
        pyrLA1_rows_empty_n : IN STD_LOGIC;
        pyrLA1_rows_read : OUT STD_LOGIC;
        pyrLA1_cols_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        pyrLA1_cols_empty_n : IN STD_LOGIC;
        pyrLA1_cols_read : OUT STD_LOGIC;
        pyrLA0_rows_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        pyrLA0_rows_out_full_n : IN STD_LOGIC;
        pyrLA0_rows_out_write : OUT STD_LOGIC;
        pyrLA0_cols_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
        pyrLA0_cols_out_full_n : IN STD_LOGIC;
        pyrLA0_cols_out_write : OUT STD_LOGIC;
        pyrLA1_rows_out_din : OUT STD_LOGIC_VECTOR (8 downto 0);
        pyrLA1_rows_out_full_n : IN STD_LOGIC;
        pyrLA1_rows_out_write : OUT STD_LOGIC;
        pyrLA1_cols_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
        pyrLA1_cols_out_full_n : IN STD_LOGIC;
        pyrLA1_cols_out_write : OUT STD_LOGIC );
    end component;


    component blendOpt_480_640_83 IS
    port (
        imageA_rows_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        imageA_rows_empty_n : IN STD_LOGIC;
        imageA_rows_read : OUT STD_LOGIC;
        imageA_cols_dout : IN STD_LOGIC_VECTOR (10 downto 0);
        imageA_cols_empty_n : IN STD_LOGIC;
        imageA_cols_read : OUT STD_LOGIC;
        imageA_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imageA_data_V_empty_n : IN STD_LOGIC;
        imageA_data_V_read : OUT STD_LOGIC;
        imageB_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imageB_data_V_empty_n : IN STD_LOGIC;
        imageB_data_V_read : OUT STD_LOGIC;
        imageS_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imageS_data_V_full_n : IN STD_LOGIC;
        imageS_data_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component blendOpt_480_640_s IS
    port (
        imageA_rows_dout : IN STD_LOGIC_VECTOR (8 downto 0);
        imageA_rows_empty_n : IN STD_LOGIC;
        imageA_rows_read : OUT STD_LOGIC;
        imageA_cols_dout : IN STD_LOGIC_VECTOR (9 downto 0);
        imageA_cols_empty_n : IN STD_LOGIC;
        imageA_cols_read : OUT STD_LOGIC;
        imageA_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imageA_data_V_empty_n : IN STD_LOGIC;
        imageA_data_V_read : OUT STD_LOGIC;
        imageB_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        imageB_data_V_empty_n : IN STD_LOGIC;
        imageB_data_V_read : OUT STD_LOGIC;
        imageS_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        imageS_data_V_full_n : IN STD_LOGIC;
        imageS_data_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component fifo_w10_d2_A_x0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (9 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w11_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (10 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w9_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (8 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    blendL_entry126_U0 : component blendL_entry126
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => blendL_entry126_U0_ap_start,
        ap_done => blendL_entry126_U0_ap_done,
        ap_continue => blendL_entry126_U0_ap_continue,
        ap_idle => blendL_entry126_U0_ap_idle,
        ap_ready => blendL_entry126_U0_ap_ready,
        pyrLA0_rows_dout => pyrLA0_rows_dout,
        pyrLA0_rows_empty_n => pyrLA0_rows_empty_n,
        pyrLA0_rows_read => blendL_entry126_U0_pyrLA0_rows_read,
        pyrLA0_cols_dout => pyrLA0_cols_dout,
        pyrLA0_cols_empty_n => pyrLA0_cols_empty_n,
        pyrLA0_cols_read => blendL_entry126_U0_pyrLA0_cols_read,
        pyrLA1_rows_dout => pyrLA1_rows_dout,
        pyrLA1_rows_empty_n => pyrLA1_rows_empty_n,
        pyrLA1_rows_read => blendL_entry126_U0_pyrLA1_rows_read,
        pyrLA1_cols_dout => pyrLA1_cols_dout,
        pyrLA1_cols_empty_n => pyrLA1_cols_empty_n,
        pyrLA1_cols_read => blendL_entry126_U0_pyrLA1_cols_read,
        pyrLA0_rows_out_din => blendL_entry126_U0_pyrLA0_rows_out_din,
        pyrLA0_rows_out_full_n => pyrLA0_rows_c_i_full_n,
        pyrLA0_rows_out_write => blendL_entry126_U0_pyrLA0_rows_out_write,
        pyrLA0_cols_out_din => blendL_entry126_U0_pyrLA0_cols_out_din,
        pyrLA0_cols_out_full_n => pyrLA0_cols_c_i_full_n,
        pyrLA0_cols_out_write => blendL_entry126_U0_pyrLA0_cols_out_write,
        pyrLA1_rows_out_din => blendL_entry126_U0_pyrLA1_rows_out_din,
        pyrLA1_rows_out_full_n => pyrLA1_rows_c_i_full_n,
        pyrLA1_rows_out_write => blendL_entry126_U0_pyrLA1_rows_out_write,
        pyrLA1_cols_out_din => blendL_entry126_U0_pyrLA1_cols_out_din,
        pyrLA1_cols_out_full_n => pyrLA1_cols_c_i_full_n,
        pyrLA1_cols_out_write => blendL_entry126_U0_pyrLA1_cols_out_write);

    blendOpt_480_640_83_U0 : component blendOpt_480_640_83
    port map (
        imageA_rows_dout => pyrLA0_rows_c_i_dout,
        imageA_rows_empty_n => pyrLA0_rows_c_i_empty_n,
        imageA_rows_read => blendOpt_480_640_83_U0_imageA_rows_read,
        imageA_cols_dout => pyrLA0_cols_c_i_dout,
        imageA_cols_empty_n => pyrLA0_cols_c_i_empty_n,
        imageA_cols_read => blendOpt_480_640_83_U0_imageA_cols_read,
        imageA_data_V_dout => pyrLA0_data_V_dout,
        imageA_data_V_empty_n => pyrLA0_data_V_empty_n,
        imageA_data_V_read => blendOpt_480_640_83_U0_imageA_data_V_read,
        imageB_data_V_dout => pyrLB0_data_V_dout,
        imageB_data_V_empty_n => pyrLB0_data_V_empty_n,
        imageB_data_V_read => blendOpt_480_640_83_U0_imageB_data_V_read,
        imageS_data_V_din => blendOpt_480_640_83_U0_imageS_data_V_din,
        imageS_data_V_full_n => pyrS0_data_V_full_n,
        imageS_data_V_write => blendOpt_480_640_83_U0_imageS_data_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => blendOpt_480_640_83_U0_ap_start,
        ap_done => blendOpt_480_640_83_U0_ap_done,
        ap_ready => blendOpt_480_640_83_U0_ap_ready,
        ap_idle => blendOpt_480_640_83_U0_ap_idle,
        ap_continue => blendOpt_480_640_83_U0_ap_continue);

    blendOpt_480_640_U0 : component blendOpt_480_640_s
    port map (
        imageA_rows_dout => pyrLA1_rows_c_i_dout,
        imageA_rows_empty_n => pyrLA1_rows_c_i_empty_n,
        imageA_rows_read => blendOpt_480_640_U0_imageA_rows_read,
        imageA_cols_dout => pyrLA1_cols_c_i_dout,
        imageA_cols_empty_n => pyrLA1_cols_c_i_empty_n,
        imageA_cols_read => blendOpt_480_640_U0_imageA_cols_read,
        imageA_data_V_dout => pyrLA1_data_V_dout,
        imageA_data_V_empty_n => pyrLA1_data_V_empty_n,
        imageA_data_V_read => blendOpt_480_640_U0_imageA_data_V_read,
        imageB_data_V_dout => pyrLB1_data_V_dout,
        imageB_data_V_empty_n => pyrLB1_data_V_empty_n,
        imageB_data_V_read => blendOpt_480_640_U0_imageB_data_V_read,
        imageS_data_V_din => blendOpt_480_640_U0_imageS_data_V_din,
        imageS_data_V_full_n => pyrS1_data_V_full_n,
        imageS_data_V_write => blendOpt_480_640_U0_imageS_data_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => blendOpt_480_640_U0_ap_start,
        ap_done => blendOpt_480_640_U0_ap_done,
        ap_ready => blendOpt_480_640_U0_ap_ready,
        ap_idle => blendOpt_480_640_U0_ap_idle,
        ap_continue => blendOpt_480_640_U0_ap_continue);

    pyrLA0_rows_c_i_U : component fifo_w10_d2_A_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => blendL_entry126_U0_pyrLA0_rows_out_din,
        if_full_n => pyrLA0_rows_c_i_full_n,
        if_write => blendL_entry126_U0_pyrLA0_rows_out_write,
        if_dout => pyrLA0_rows_c_i_dout,
        if_empty_n => pyrLA0_rows_c_i_empty_n,
        if_read => blendOpt_480_640_83_U0_imageA_rows_read);

    pyrLA0_cols_c_i_U : component fifo_w11_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => blendL_entry126_U0_pyrLA0_cols_out_din,
        if_full_n => pyrLA0_cols_c_i_full_n,
        if_write => blendL_entry126_U0_pyrLA0_cols_out_write,
        if_dout => pyrLA0_cols_c_i_dout,
        if_empty_n => pyrLA0_cols_c_i_empty_n,
        if_read => blendOpt_480_640_83_U0_imageA_cols_read);

    pyrLA1_rows_c_i_U : component fifo_w9_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => blendL_entry126_U0_pyrLA1_rows_out_din,
        if_full_n => pyrLA1_rows_c_i_full_n,
        if_write => blendL_entry126_U0_pyrLA1_rows_out_write,
        if_dout => pyrLA1_rows_c_i_dout,
        if_empty_n => pyrLA1_rows_c_i_empty_n,
        if_read => blendOpt_480_640_U0_imageA_rows_read);

    pyrLA1_cols_c_i_U : component fifo_w10_d2_A_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => blendL_entry126_U0_pyrLA1_cols_out_din,
        if_full_n => pyrLA1_cols_c_i_full_n,
        if_write => blendL_entry126_U0_pyrLA1_cols_out_write,
        if_dout => pyrLA1_cols_c_i_dout,
        if_empty_n => pyrLA1_cols_c_i_empty_n,
        if_read => blendOpt_480_640_U0_imageA_cols_read);





    ap_sync_reg_blendL_entry126_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_blendL_entry126_U0_ap_ready <= ap_const_logic_0;
            else
                if (((real_start and ap_sync_ready) = ap_const_logic_1)) then 
                    ap_sync_reg_blendL_entry126_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_blendL_entry126_U0_ap_ready <= ap_sync_blendL_entry126_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_blendOpt_480_640_83_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_blendOpt_480_640_83_U0_ap_ready <= ap_const_logic_0;
            else
                if (((real_start and ap_sync_ready) = ap_const_logic_1)) then 
                    ap_sync_reg_blendOpt_480_640_83_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_blendOpt_480_640_83_U0_ap_ready <= ap_sync_blendOpt_480_640_83_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_blendOpt_480_640_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_blendOpt_480_640_U0_ap_ready <= ap_const_logic_0;
            else
                if (((real_start and ap_sync_ready) = ap_const_logic_1)) then 
                    ap_sync_reg_blendOpt_480_640_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_blendOpt_480_640_U0_ap_ready <= ap_sync_blendOpt_480_640_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    blendL_entry126_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((blendL_entry126_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                blendL_entry126_U0_ap_ready_count <= std_logic_vector(unsigned(blendL_entry126_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (blendL_entry126_U0_ap_ready = ap_const_logic_1))) then 
                blendL_entry126_U0_ap_ready_count <= std_logic_vector(unsigned(blendL_entry126_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    blendOpt_480_640_83_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((blendOpt_480_640_83_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                blendOpt_480_640_83_U0_ap_ready_count <= std_logic_vector(unsigned(blendOpt_480_640_83_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (blendOpt_480_640_83_U0_ap_ready = ap_const_logic_1))) then 
                blendOpt_480_640_83_U0_ap_ready_count <= std_logic_vector(unsigned(blendOpt_480_640_83_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    blendOpt_480_640_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((blendOpt_480_640_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                blendOpt_480_640_U0_ap_ready_count <= std_logic_vector(unsigned(blendOpt_480_640_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (blendOpt_480_640_U0_ap_ready = ap_const_logic_1))) then 
                blendOpt_480_640_U0_ap_ready_count <= std_logic_vector(unsigned(blendOpt_480_640_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    ap_done <= ap_sync_done;
    ap_idle <= (blendOpt_480_640_U0_ap_idle and blendOpt_480_640_83_U0_ap_idle and blendL_entry126_U0_ap_idle);
    ap_ready <= internal_ap_ready;
    ap_sync_blendL_entry126_U0_ap_ready <= (blendL_entry126_U0_ap_ready or ap_sync_reg_blendL_entry126_U0_ap_ready);
    ap_sync_blendOpt_480_640_83_U0_ap_ready <= (blendOpt_480_640_83_U0_ap_ready or ap_sync_reg_blendOpt_480_640_83_U0_ap_ready);
    ap_sync_blendOpt_480_640_U0_ap_ready <= (blendOpt_480_640_U0_ap_ready or ap_sync_reg_blendOpt_480_640_U0_ap_ready);
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (blendOpt_480_640_U0_ap_done and blendOpt_480_640_83_U0_ap_done);
    ap_sync_ready <= (ap_sync_blendOpt_480_640_U0_ap_ready and ap_sync_blendOpt_480_640_83_U0_ap_ready and ap_sync_blendL_entry126_U0_ap_ready);
    blendL_entry126_U0_ap_continue <= ap_const_logic_1;
    blendL_entry126_U0_ap_start <= (real_start and (ap_sync_reg_blendL_entry126_U0_ap_ready xor ap_const_logic_1));
    blendL_entry126_U0_start_full_n <= ap_const_logic_1;
    blendL_entry126_U0_start_write <= ap_const_logic_0;
    blendOpt_480_640_83_U0_ap_continue <= ap_sync_continue;
    blendOpt_480_640_83_U0_ap_start <= (real_start and (ap_sync_reg_blendOpt_480_640_83_U0_ap_ready xor ap_const_logic_1));
    blendOpt_480_640_83_U0_start_full_n <= ap_const_logic_1;
    blendOpt_480_640_83_U0_start_write <= ap_const_logic_0;
    blendOpt_480_640_U0_ap_continue <= ap_sync_continue;
    blendOpt_480_640_U0_ap_start <= (real_start and (ap_sync_reg_blendOpt_480_640_U0_ap_ready xor ap_const_logic_1));
    blendOpt_480_640_U0_start_full_n <= ap_const_logic_1;
    blendOpt_480_640_U0_start_write <= ap_const_logic_0;
    internal_ap_ready <= ap_sync_ready;
    pyrLA0_cols_read <= blendL_entry126_U0_pyrLA0_cols_read;
    pyrLA0_data_V_read <= blendOpt_480_640_83_U0_imageA_data_V_read;
    pyrLA0_rows_read <= blendL_entry126_U0_pyrLA0_rows_read;
    pyrLA1_cols_read <= blendL_entry126_U0_pyrLA1_cols_read;
    pyrLA1_data_V_read <= blendOpt_480_640_U0_imageA_data_V_read;
    pyrLA1_rows_read <= blendL_entry126_U0_pyrLA1_rows_read;
    pyrLB0_data_V_read <= blendOpt_480_640_83_U0_imageB_data_V_read;
    pyrLB1_data_V_read <= blendOpt_480_640_U0_imageB_data_V_read;
    pyrS0_data_V_din <= blendOpt_480_640_83_U0_imageS_data_V_din;
    pyrS0_data_V_write <= blendOpt_480_640_83_U0_imageS_data_V_write;
    pyrS1_data_V_din <= blendOpt_480_640_U0_imageS_data_V_din;
    pyrS1_data_V_write <= blendOpt_480_640_U0_imageS_data_V_write;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
