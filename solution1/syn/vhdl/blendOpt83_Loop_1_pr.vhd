-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity blendOpt83_Loop_1_pr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    imageA_rows_load3_loc_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    imageA_rows_load3_loc_empty_n : IN STD_LOGIC;
    imageA_rows_load3_loc_read : OUT STD_LOGIC;
    imageA_cols_load4_loc_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    imageA_cols_load4_loc_empty_n : IN STD_LOGIC;
    imageA_cols_load4_loc_read : OUT STD_LOGIC;
    imageA_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    imageA_data_V_empty_n : IN STD_LOGIC;
    imageA_data_V_read : OUT STD_LOGIC;
    p_imageA_in_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_imageA_in_V_V_full_n : IN STD_LOGIC;
    p_imageA_in_V_V_write : OUT STD_LOGIC;
    imageB_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    imageB_data_V_empty_n : IN STD_LOGIC;
    imageB_data_V_read : OUT STD_LOGIC;
    p_imageB_in_V_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_imageB_in_V_V_full_n : IN STD_LOGIC;
    p_imageB_in_V_V_write : OUT STD_LOGIC;
    imageA_rows_load3_loc_out_din : OUT STD_LOGIC_VECTOR (9 downto 0);
    imageA_rows_load3_loc_out_full_n : IN STD_LOGIC;
    imageA_rows_load3_loc_out_write : OUT STD_LOGIC;
    imageA_cols_load4_loc_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
    imageA_cols_load4_loc_out_full_n : IN STD_LOGIC;
    imageA_cols_load4_loc_out_write : OUT STD_LOGIC );
end;


architecture behav of blendOpt83_Loop_1_pr is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal imageA_rows_load3_loc_blk_n : STD_LOGIC;
    signal imageA_cols_load4_loc_blk_n : STD_LOGIC;
    signal tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n : STD_LOGIC;
    signal imageA_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln471_reg_169 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_imageA_in_V_V_blk_n : STD_LOGIC;
    signal tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n : STD_LOGIC;
    signal imageB_data_V_blk_n : STD_LOGIC;
    signal p_imageB_in_V_V_blk_n : STD_LOGIC;
    signal imageA_rows_load3_loc_out_blk_n : STD_LOGIC;
    signal imageA_cols_load4_loc_out_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_106 : STD_LOGIC_VECTOR (20 downto 0);
    signal imageA_rows_load3_lo_reg_154 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal imageA_cols_load4_lo_reg_159 : STD_LOGIC_VECTOR (10 downto 0);
    signal bound_fu_148_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal bound_reg_164 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln471_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln471_fu_142_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal tmp_V_read_r_fu_117_ap_start : STD_LOGIC;
    signal tmp_V_read_r_fu_117_ap_done : STD_LOGIC;
    signal tmp_V_read_r_fu_117_ap_idle : STD_LOGIC;
    signal tmp_V_read_r_fu_117_ap_ready : STD_LOGIC;
    signal tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_read : STD_LOGIC;
    signal tmp_V_read_r_fu_117_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_read_r_fu_117_ap_ce : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter0_ignore_call3 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1_ignore_call3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp29 : BOOLEAN;
    signal tmp_V_11_read_r_fu_124_ap_start : STD_LOGIC;
    signal tmp_V_11_read_r_fu_124_ap_done : STD_LOGIC;
    signal tmp_V_11_read_r_fu_124_ap_idle : STD_LOGIC;
    signal tmp_V_11_read_r_fu_124_ap_ready : STD_LOGIC;
    signal tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_read : STD_LOGIC;
    signal tmp_V_11_read_r_fu_124_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_11_read_r_fu_124_ap_ce : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter0_ignore_call5 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1_ignore_call5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp31 : BOOLEAN;
    signal tmp_V_read_r_fu_117_ap_start_reg : STD_LOGIC := '0';
    signal tmp_V_11_read_r_fu_124_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_148_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal bound_fu_148_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_148_p00 : STD_LOGIC_VECTOR (20 downto 0);
    signal bound_fu_148_p10 : STD_LOGIC_VECTOR (20 downto 0);

    component read_r IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Mat_0_480_640_1_data_V_addr_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        Mat_0_480_640_1_data_V_addr_empty_n : IN STD_LOGIC;
        Mat_0_480_640_1_data_V_addr_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
        Mat_0_480_640_1_data_V_addr_blk_n : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC );
    end component;


    component blendTop_mul_mul_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;



begin
    tmp_V_read_r_fu_117 : component read_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => tmp_V_read_r_fu_117_ap_start,
        ap_done => tmp_V_read_r_fu_117_ap_done,
        ap_idle => tmp_V_read_r_fu_117_ap_idle,
        ap_ready => tmp_V_read_r_fu_117_ap_ready,
        Mat_0_480_640_1_data_V_addr_dout => imageA_data_V_dout,
        Mat_0_480_640_1_data_V_addr_empty_n => imageA_data_V_empty_n,
        Mat_0_480_640_1_data_V_addr_read => tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_read,
        ap_return => tmp_V_read_r_fu_117_ap_return,
        Mat_0_480_640_1_data_V_addr_blk_n => tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n,
        ap_ce => tmp_V_read_r_fu_117_ap_ce);

    tmp_V_11_read_r_fu_124 : component read_r
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => tmp_V_11_read_r_fu_124_ap_start,
        ap_done => tmp_V_11_read_r_fu_124_ap_done,
        ap_idle => tmp_V_11_read_r_fu_124_ap_idle,
        ap_ready => tmp_V_11_read_r_fu_124_ap_ready,
        Mat_0_480_640_1_data_V_addr_dout => imageB_data_V_dout,
        Mat_0_480_640_1_data_V_addr_empty_n => imageB_data_V_empty_n,
        Mat_0_480_640_1_data_V_addr_read => tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_read,
        ap_return => tmp_V_11_read_r_fu_124_ap_return,
        Mat_0_480_640_1_data_V_addr_blk_n => tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n,
        ap_ce => tmp_V_11_read_r_fu_124_ap_ce);

    blendTop_mul_mul_bkb_U58 : component blendTop_mul_mul_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 10,
        dout_WIDTH => 21)
    port map (
        din0 => bound_fu_148_p0,
        din1 => bound_fu_148_p1,
        dout => bound_fu_148_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    tmp_V_11_read_r_fu_124_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_V_11_read_r_fu_124_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln471_fu_137_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    tmp_V_11_read_r_fu_124_ap_start_reg <= ap_const_logic_1;
                elsif ((tmp_V_11_read_r_fu_124_ap_ready = ap_const_logic_1)) then 
                    tmp_V_11_read_r_fu_124_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    tmp_V_read_r_fu_117_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_V_read_r_fu_117_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln471_fu_137_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    tmp_V_read_r_fu_117_ap_start_reg <= ap_const_logic_1;
                elsif ((tmp_V_read_r_fu_117_ap_ready = ap_const_logic_1)) then 
                    tmp_V_read_r_fu_117_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln471_fu_137_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_106 <= add_ln471_fu_142_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_106 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound_reg_164 <= bound_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln471_reg_169 <= icmp_ln471_fu_137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((imageA_cols_load4_loc_out_full_n = ap_const_logic_0) or (imageA_rows_load3_loc_out_full_n = ap_const_logic_0) or (imageA_cols_load4_loc_empty_n = ap_const_logic_0) or (imageA_rows_load3_loc_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                imageA_cols_load4_lo_reg_159 <= imageA_cols_load4_loc_dout;
                imageA_rows_load3_lo_reg_154 <= imageA_rows_load3_loc_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, imageA_rows_load3_loc_empty_n, imageA_cols_load4_loc_empty_n, imageA_rows_load3_loc_out_full_n, imageA_cols_load4_loc_out_full_n, icmp_ln471_fu_137_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((imageA_cols_load4_loc_out_full_n = ap_const_logic_0) or (imageA_rows_load3_loc_out_full_n = ap_const_logic_0) or (imageA_cols_load4_loc_empty_n = ap_const_logic_0) or (imageA_rows_load3_loc_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln471_fu_137_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln471_fu_137_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln471_fu_142_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_106) + unsigned(ap_const_lv21_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_imageA_in_V_V_full_n, p_imageB_in_V_V_full_n, tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n, ap_enable_reg_pp0_iter1, icmp_ln471_reg_169, tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln471_reg_169 = ap_const_lv1_0) and (p_imageB_in_V_V_full_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (p_imageA_in_V_V_full_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_imageA_in_V_V_full_n, p_imageB_in_V_V_full_n, tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n, ap_enable_reg_pp0_iter1, icmp_ln471_reg_169, tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln471_reg_169 = ap_const_lv1_0) and (p_imageB_in_V_V_full_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (p_imageA_in_V_V_full_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp29_assign_proc : process(p_imageA_in_V_V_full_n, p_imageB_in_V_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln471_reg_169, tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp29 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln471_reg_169 = ap_const_lv1_0) and (p_imageB_in_V_V_full_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (p_imageA_in_V_V_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp31_assign_proc : process(p_imageA_in_V_V_full_n, p_imageB_in_V_V_full_n, tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n, ap_enable_reg_pp0_iter1, icmp_ln471_reg_169)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp31 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln471_reg_169 = ap_const_lv1_0) and (p_imageB_in_V_V_full_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (p_imageA_in_V_V_full_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_imageA_in_V_V_full_n, p_imageB_in_V_V_full_n, tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n, ap_enable_reg_pp0_iter1, icmp_ln471_reg_169, tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((icmp_ln471_reg_169 = ap_const_lv1_0) and (p_imageB_in_V_V_full_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (p_imageA_in_V_V_full_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, imageA_rows_load3_loc_empty_n, imageA_cols_load4_loc_empty_n, imageA_rows_load3_loc_out_full_n, imageA_cols_load4_loc_out_full_n)
    begin
                ap_block_state1 <= ((imageA_cols_load4_loc_out_full_n = ap_const_logic_0) or (imageA_rows_load3_loc_out_full_n = ap_const_logic_0) or (imageA_cols_load4_loc_empty_n = ap_const_logic_0) or (imageA_rows_load3_loc_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0_ignore_call3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0_ignore_call5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(p_imageA_in_V_V_full_n, p_imageB_in_V_V_full_n, tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n, icmp_ln471_reg_169, tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((icmp_ln471_reg_169 = ap_const_lv1_0) and (p_imageB_in_V_V_full_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (p_imageA_in_V_V_full_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n = ap_const_logic_0)));
    end process;


    ap_block_state4_pp0_stage0_iter1_ignore_call3_assign_proc : process(p_imageA_in_V_V_full_n, p_imageB_in_V_V_full_n, icmp_ln471_reg_169, tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n)
    begin
                ap_block_state4_pp0_stage0_iter1_ignore_call3 <= (((icmp_ln471_reg_169 = ap_const_lv1_0) and (p_imageB_in_V_V_full_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (p_imageA_in_V_V_full_n = ap_const_logic_0)));
    end process;


    ap_block_state4_pp0_stage0_iter1_ignore_call5_assign_proc : process(p_imageA_in_V_V_full_n, p_imageB_in_V_V_full_n, tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n, icmp_ln471_reg_169)
    begin
                ap_block_state4_pp0_stage0_iter1_ignore_call5 <= (((icmp_ln471_reg_169 = ap_const_lv1_0) and (p_imageB_in_V_V_full_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (p_imageA_in_V_V_full_n = ap_const_logic_0)) or ((icmp_ln471_reg_169 = ap_const_lv1_0) and (tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln471_fu_137_p2)
    begin
        if ((icmp_ln471_fu_137_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound_fu_148_p0 <= bound_fu_148_p00(11 - 1 downto 0);
    bound_fu_148_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imageA_cols_load4_lo_reg_159),21));
    bound_fu_148_p1 <= bound_fu_148_p10(10 - 1 downto 0);
    bound_fu_148_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(imageA_rows_load3_lo_reg_154),21));
    icmp_ln471_fu_137_p2 <= "1" when (indvar_flatten_reg_106 = bound_reg_164) else "0";

    imageA_cols_load4_loc_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, imageA_cols_load4_loc_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imageA_cols_load4_loc_blk_n <= imageA_cols_load4_loc_empty_n;
        else 
            imageA_cols_load4_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imageA_cols_load4_loc_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, imageA_cols_load4_loc_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imageA_cols_load4_loc_out_blk_n <= imageA_cols_load4_loc_out_full_n;
        else 
            imageA_cols_load4_loc_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imageA_cols_load4_loc_out_din <= imageA_cols_load4_loc_dout;

    imageA_cols_load4_loc_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, imageA_rows_load3_loc_empty_n, imageA_cols_load4_loc_empty_n, imageA_rows_load3_loc_out_full_n, imageA_cols_load4_loc_out_full_n)
    begin
        if ((not(((imageA_cols_load4_loc_out_full_n = ap_const_logic_0) or (imageA_rows_load3_loc_out_full_n = ap_const_logic_0) or (imageA_cols_load4_loc_empty_n = ap_const_logic_0) or (imageA_rows_load3_loc_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imageA_cols_load4_loc_out_write <= ap_const_logic_1;
        else 
            imageA_cols_load4_loc_out_write <= ap_const_logic_0;
        end if; 
    end process;


    imageA_cols_load4_loc_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, imageA_rows_load3_loc_empty_n, imageA_cols_load4_loc_empty_n, imageA_rows_load3_loc_out_full_n, imageA_cols_load4_loc_out_full_n)
    begin
        if ((not(((imageA_cols_load4_loc_out_full_n = ap_const_logic_0) or (imageA_rows_load3_loc_out_full_n = ap_const_logic_0) or (imageA_cols_load4_loc_empty_n = ap_const_logic_0) or (imageA_rows_load3_loc_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imageA_cols_load4_loc_read <= ap_const_logic_1;
        else 
            imageA_cols_load4_loc_read <= ap_const_logic_0;
        end if; 
    end process;


    imageA_data_V_blk_n_assign_proc : process(tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln471_reg_169)
    begin
        if (((icmp_ln471_reg_169 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imageA_data_V_blk_n <= tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n;
        else 
            imageA_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imageA_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln471_reg_169, tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_read)
    begin
        if (((icmp_ln471_reg_169 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imageA_data_V_read <= tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_read;
        else 
            imageA_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    imageA_rows_load3_loc_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, imageA_rows_load3_loc_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imageA_rows_load3_loc_blk_n <= imageA_rows_load3_loc_empty_n;
        else 
            imageA_rows_load3_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imageA_rows_load3_loc_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, imageA_rows_load3_loc_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imageA_rows_load3_loc_out_blk_n <= imageA_rows_load3_loc_out_full_n;
        else 
            imageA_rows_load3_loc_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imageA_rows_load3_loc_out_din <= imageA_rows_load3_loc_dout;

    imageA_rows_load3_loc_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, imageA_rows_load3_loc_empty_n, imageA_cols_load4_loc_empty_n, imageA_rows_load3_loc_out_full_n, imageA_cols_load4_loc_out_full_n)
    begin
        if ((not(((imageA_cols_load4_loc_out_full_n = ap_const_logic_0) or (imageA_rows_load3_loc_out_full_n = ap_const_logic_0) or (imageA_cols_load4_loc_empty_n = ap_const_logic_0) or (imageA_rows_load3_loc_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imageA_rows_load3_loc_out_write <= ap_const_logic_1;
        else 
            imageA_rows_load3_loc_out_write <= ap_const_logic_0;
        end if; 
    end process;


    imageA_rows_load3_loc_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, imageA_rows_load3_loc_empty_n, imageA_cols_load4_loc_empty_n, imageA_rows_load3_loc_out_full_n, imageA_cols_load4_loc_out_full_n)
    begin
        if ((not(((imageA_cols_load4_loc_out_full_n = ap_const_logic_0) or (imageA_rows_load3_loc_out_full_n = ap_const_logic_0) or (imageA_cols_load4_loc_empty_n = ap_const_logic_0) or (imageA_rows_load3_loc_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            imageA_rows_load3_loc_read <= ap_const_logic_1;
        else 
            imageA_rows_load3_loc_read <= ap_const_logic_0;
        end if; 
    end process;


    imageB_data_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln471_reg_169, tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n)
    begin
        if (((icmp_ln471_reg_169 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imageB_data_V_blk_n <= tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n;
        else 
            imageB_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imageB_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln471_reg_169, tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_read)
    begin
        if (((icmp_ln471_reg_169 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imageB_data_V_read <= tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_read;
        else 
            imageB_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    p_imageA_in_V_V_blk_n_assign_proc : process(p_imageA_in_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln471_reg_169)
    begin
        if (((icmp_ln471_reg_169 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_imageA_in_V_V_blk_n <= p_imageA_in_V_V_full_n;
        else 
            p_imageA_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_imageA_in_V_V_din <= tmp_V_read_r_fu_117_ap_return;

    p_imageA_in_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln471_reg_169, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln471_reg_169 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_imageA_in_V_V_write <= ap_const_logic_1;
        else 
            p_imageA_in_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    p_imageB_in_V_V_blk_n_assign_proc : process(p_imageB_in_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln471_reg_169)
    begin
        if (((icmp_ln471_reg_169 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_imageB_in_V_V_blk_n <= p_imageB_in_V_V_full_n;
        else 
            p_imageB_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_imageB_in_V_V_din <= tmp_V_11_read_r_fu_124_ap_return;

    p_imageB_in_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln471_reg_169, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln471_reg_169 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_imageB_in_V_V_write <= ap_const_logic_1;
        else 
            p_imageB_in_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    tmp_V_11_read_r_fu_124_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp31))) then 
            tmp_V_11_read_r_fu_124_ap_ce <= ap_const_logic_1;
        else 
            tmp_V_11_read_r_fu_124_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    tmp_V_11_read_r_fu_124_ap_start <= tmp_V_11_read_r_fu_124_ap_start_reg;

    tmp_V_read_r_fu_117_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp29))) then 
            tmp_V_read_r_fu_117_ap_ce <= ap_const_logic_1;
        else 
            tmp_V_read_r_fu_117_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    tmp_V_read_r_fu_117_ap_start <= tmp_V_read_r_fu_117_ap_start_reg;
end behav;
