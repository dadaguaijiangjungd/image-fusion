// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module blendOpt83_Loop_1_pr (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        imageA_rows_load3_loc_dout,
        imageA_rows_load3_loc_empty_n,
        imageA_rows_load3_loc_read,
        imageA_cols_load4_loc_dout,
        imageA_cols_load4_loc_empty_n,
        imageA_cols_load4_loc_read,
        imageA_data_V_dout,
        imageA_data_V_empty_n,
        imageA_data_V_read,
        p_imageA_in_V_V_din,
        p_imageA_in_V_V_full_n,
        p_imageA_in_V_V_write,
        imageB_data_V_dout,
        imageB_data_V_empty_n,
        imageB_data_V_read,
        p_imageB_in_V_V_din,
        p_imageB_in_V_V_full_n,
        p_imageB_in_V_V_write,
        imageA_rows_load3_loc_out_din,
        imageA_rows_load3_loc_out_full_n,
        imageA_rows_load3_loc_out_write,
        imageA_cols_load4_loc_out_din,
        imageA_cols_load4_loc_out_full_n,
        imageA_cols_load4_loc_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [9:0] imageA_rows_load3_loc_dout;
input   imageA_rows_load3_loc_empty_n;
output   imageA_rows_load3_loc_read;
input  [10:0] imageA_cols_load4_loc_dout;
input   imageA_cols_load4_loc_empty_n;
output   imageA_cols_load4_loc_read;
input  [7:0] imageA_data_V_dout;
input   imageA_data_V_empty_n;
output   imageA_data_V_read;
output  [7:0] p_imageA_in_V_V_din;
input   p_imageA_in_V_V_full_n;
output   p_imageA_in_V_V_write;
input  [7:0] imageB_data_V_dout;
input   imageB_data_V_empty_n;
output   imageB_data_V_read;
output  [7:0] p_imageB_in_V_V_din;
input   p_imageB_in_V_V_full_n;
output   p_imageB_in_V_V_write;
output  [9:0] imageA_rows_load3_loc_out_din;
input   imageA_rows_load3_loc_out_full_n;
output   imageA_rows_load3_loc_out_write;
output  [10:0] imageA_cols_load4_loc_out_din;
input   imageA_cols_load4_loc_out_full_n;
output   imageA_cols_load4_loc_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg imageA_rows_load3_loc_read;
reg imageA_cols_load4_loc_read;
reg imageA_data_V_read;
reg p_imageA_in_V_V_write;
reg imageB_data_V_read;
reg p_imageB_in_V_V_write;
reg imageA_rows_load3_loc_out_write;
reg imageA_cols_load4_loc_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    imageA_rows_load3_loc_blk_n;
reg    imageA_cols_load4_loc_blk_n;
wire    tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n;
reg    imageA_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln471_reg_169;
reg    p_imageA_in_V_V_blk_n;
wire    tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n;
reg    imageB_data_V_blk_n;
reg    p_imageB_in_V_V_blk_n;
reg    imageA_rows_load3_loc_out_blk_n;
reg    imageA_cols_load4_loc_out_blk_n;
reg   [20:0] indvar_flatten_reg_106;
reg   [9:0] imageA_rows_load3_lo_reg_154;
reg    ap_block_state1;
reg   [10:0] imageA_cols_load4_lo_reg_159;
wire   [20:0] bound_fu_148_p2;
reg   [20:0] bound_reg_164;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln471_fu_137_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [20:0] add_ln471_fu_142_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    tmp_V_read_r_fu_117_ap_start;
wire    tmp_V_read_r_fu_117_ap_done;
wire    tmp_V_read_r_fu_117_ap_idle;
wire    tmp_V_read_r_fu_117_ap_ready;
wire    tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_read;
wire   [7:0] tmp_V_read_r_fu_117_ap_return;
reg    tmp_V_read_r_fu_117_ap_ce;
wire    ap_block_state3_pp0_stage0_iter0_ignore_call3;
reg    ap_block_state4_pp0_stage0_iter1_ignore_call3;
reg    ap_block_pp0_stage0_11001_ignoreCallOp29;
wire    tmp_V_11_read_r_fu_124_ap_start;
wire    tmp_V_11_read_r_fu_124_ap_done;
wire    tmp_V_11_read_r_fu_124_ap_idle;
wire    tmp_V_11_read_r_fu_124_ap_ready;
wire    tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_read;
wire   [7:0] tmp_V_11_read_r_fu_124_ap_return;
reg    tmp_V_11_read_r_fu_124_ap_ce;
wire    ap_block_state3_pp0_stage0_iter0_ignore_call5;
reg    ap_block_state4_pp0_stage0_iter1_ignore_call5;
reg    ap_block_pp0_stage0_11001_ignoreCallOp31;
reg    tmp_V_read_r_fu_117_ap_start_reg;
reg    tmp_V_11_read_r_fu_124_ap_start_reg;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] bound_fu_148_p0;
wire   [9:0] bound_fu_148_p1;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [20:0] bound_fu_148_p00;
wire   [20:0] bound_fu_148_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 tmp_V_read_r_fu_117_ap_start_reg = 1'b0;
#0 tmp_V_11_read_r_fu_124_ap_start_reg = 1'b0;
end

read_r tmp_V_read_r_fu_117(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(tmp_V_read_r_fu_117_ap_start),
    .ap_done(tmp_V_read_r_fu_117_ap_done),
    .ap_idle(tmp_V_read_r_fu_117_ap_idle),
    .ap_ready(tmp_V_read_r_fu_117_ap_ready),
    .Mat_0_480_640_1_data_V_addr_dout(imageA_data_V_dout),
    .Mat_0_480_640_1_data_V_addr_empty_n(imageA_data_V_empty_n),
    .Mat_0_480_640_1_data_V_addr_read(tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_read),
    .ap_return(tmp_V_read_r_fu_117_ap_return),
    .Mat_0_480_640_1_data_V_addr_blk_n(tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n),
    .ap_ce(tmp_V_read_r_fu_117_ap_ce)
);

read_r tmp_V_11_read_r_fu_124(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(tmp_V_11_read_r_fu_124_ap_start),
    .ap_done(tmp_V_11_read_r_fu_124_ap_done),
    .ap_idle(tmp_V_11_read_r_fu_124_ap_idle),
    .ap_ready(tmp_V_11_read_r_fu_124_ap_ready),
    .Mat_0_480_640_1_data_V_addr_dout(imageB_data_V_dout),
    .Mat_0_480_640_1_data_V_addr_empty_n(imageB_data_V_empty_n),
    .Mat_0_480_640_1_data_V_addr_read(tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_read),
    .ap_return(tmp_V_11_read_r_fu_124_ap_return),
    .Mat_0_480_640_1_data_V_addr_blk_n(tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n),
    .ap_ce(tmp_V_11_read_r_fu_124_ap_ce)
);

blendTop_mul_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 21 ))
blendTop_mul_mul_bkb_U58(
    .din0(bound_fu_148_p0),
    .din1(bound_fu_148_p1),
    .dout(bound_fu_148_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_V_11_read_r_fu_124_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln471_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            tmp_V_11_read_r_fu_124_ap_start_reg <= 1'b1;
        end else if ((tmp_V_11_read_r_fu_124_ap_ready == 1'b1)) begin
            tmp_V_11_read_r_fu_124_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        tmp_V_read_r_fu_117_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln471_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
            tmp_V_read_r_fu_117_ap_start_reg <= 1'b1;
        end else if ((tmp_V_read_r_fu_117_ap_ready == 1'b1)) begin
            tmp_V_read_r_fu_117_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln471_fu_137_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_106 <= add_ln471_fu_142_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_106 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_164 <= bound_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln471_reg_169 <= icmp_ln471_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((imageA_cols_load4_loc_out_full_n == 1'b0) | (imageA_rows_load3_loc_out_full_n == 1'b0) | (imageA_cols_load4_loc_empty_n == 1'b0) | (imageA_rows_load3_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imageA_cols_load4_lo_reg_159 <= imageA_cols_load4_loc_dout;
        imageA_rows_load3_lo_reg_154 <= imageA_rows_load3_loc_dout;
    end
end

always @ (*) begin
    if ((icmp_ln471_fu_137_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imageA_cols_load4_loc_blk_n = imageA_cols_load4_loc_empty_n;
    end else begin
        imageA_cols_load4_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imageA_cols_load4_loc_out_blk_n = imageA_cols_load4_loc_out_full_n;
    end else begin
        imageA_cols_load4_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((imageA_cols_load4_loc_out_full_n == 1'b0) | (imageA_rows_load3_loc_out_full_n == 1'b0) | (imageA_cols_load4_loc_empty_n == 1'b0) | (imageA_rows_load3_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imageA_cols_load4_loc_out_write = 1'b1;
    end else begin
        imageA_cols_load4_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((imageA_cols_load4_loc_out_full_n == 1'b0) | (imageA_rows_load3_loc_out_full_n == 1'b0) | (imageA_cols_load4_loc_empty_n == 1'b0) | (imageA_rows_load3_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imageA_cols_load4_loc_read = 1'b1;
    end else begin
        imageA_cols_load4_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln471_reg_169 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imageA_data_V_blk_n = tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n;
    end else begin
        imageA_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln471_reg_169 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imageA_data_V_read = tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_read;
    end else begin
        imageA_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imageA_rows_load3_loc_blk_n = imageA_rows_load3_loc_empty_n;
    end else begin
        imageA_rows_load3_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imageA_rows_load3_loc_out_blk_n = imageA_rows_load3_loc_out_full_n;
    end else begin
        imageA_rows_load3_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((imageA_cols_load4_loc_out_full_n == 1'b0) | (imageA_rows_load3_loc_out_full_n == 1'b0) | (imageA_cols_load4_loc_empty_n == 1'b0) | (imageA_rows_load3_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imageA_rows_load3_loc_out_write = 1'b1;
    end else begin
        imageA_rows_load3_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((imageA_cols_load4_loc_out_full_n == 1'b0) | (imageA_rows_load3_loc_out_full_n == 1'b0) | (imageA_cols_load4_loc_empty_n == 1'b0) | (imageA_rows_load3_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        imageA_rows_load3_loc_read = 1'b1;
    end else begin
        imageA_rows_load3_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln471_reg_169 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imageB_data_V_blk_n = tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n;
    end else begin
        imageB_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln471_reg_169 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imageB_data_V_read = tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_read;
    end else begin
        imageB_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln471_reg_169 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_imageA_in_V_V_blk_n = p_imageA_in_V_V_full_n;
    end else begin
        p_imageA_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln471_reg_169 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_imageA_in_V_V_write = 1'b1;
    end else begin
        p_imageA_in_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln471_reg_169 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_imageB_in_V_V_blk_n = p_imageB_in_V_V_full_n;
    end else begin
        p_imageB_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln471_reg_169 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_imageB_in_V_V_write = 1'b1;
    end else begin
        p_imageB_in_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp31))) begin
        tmp_V_11_read_r_fu_124_ap_ce = 1'b1;
    end else begin
        tmp_V_11_read_r_fu_124_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp29))) begin
        tmp_V_read_r_fu_117_ap_ce = 1'b1;
    end else begin
        tmp_V_read_r_fu_117_ap_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((imageA_cols_load4_loc_out_full_n == 1'b0) | (imageA_rows_load3_loc_out_full_n == 1'b0) | (imageA_cols_load4_loc_empty_n == 1'b0) | (imageA_rows_load3_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln471_fu_137_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln471_fu_137_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln471_fu_142_p2 = (indvar_flatten_reg_106 + 21'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln471_reg_169 == 1'd0) & (p_imageB_in_V_V_full_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (p_imageA_in_V_V_full_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln471_reg_169 == 1'd0) & (p_imageB_in_V_V_full_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (p_imageA_in_V_V_full_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp29 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln471_reg_169 == 1'd0) & (p_imageB_in_V_V_full_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (p_imageA_in_V_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp31 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln471_reg_169 == 1'd0) & (p_imageB_in_V_V_full_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (p_imageA_in_V_V_full_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln471_reg_169 == 1'd0) & (p_imageB_in_V_V_full_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (p_imageA_in_V_V_full_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((imageA_cols_load4_loc_out_full_n == 1'b0) | (imageA_rows_load3_loc_out_full_n == 1'b0) | (imageA_cols_load4_loc_empty_n == 1'b0) | (imageA_rows_load3_loc_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0_ignore_call3 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0_ignore_call5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((icmp_ln471_reg_169 == 1'd0) & (p_imageB_in_V_V_full_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (p_imageA_in_V_V_full_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1_ignore_call3 = (((icmp_ln471_reg_169 == 1'd0) & (p_imageB_in_V_V_full_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (tmp_V_11_read_r_fu_124_Mat_0_480_640_1_data_V_addr_blk_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (p_imageA_in_V_V_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1_ignore_call5 = (((icmp_ln471_reg_169 == 1'd0) & (p_imageB_in_V_V_full_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (p_imageA_in_V_V_full_n == 1'b0)) | ((icmp_ln471_reg_169 == 1'd0) & (tmp_V_read_r_fu_117_Mat_0_480_640_1_data_V_addr_blk_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound_fu_148_p0 = bound_fu_148_p00;

assign bound_fu_148_p00 = imageA_cols_load4_lo_reg_159;

assign bound_fu_148_p1 = bound_fu_148_p10;

assign bound_fu_148_p10 = imageA_rows_load3_lo_reg_154;

assign icmp_ln471_fu_137_p2 = ((indvar_flatten_reg_106 == bound_reg_164) ? 1'b1 : 1'b0);

assign imageA_cols_load4_loc_out_din = imageA_cols_load4_loc_dout;

assign imageA_rows_load3_loc_out_din = imageA_rows_load3_loc_dout;

assign p_imageA_in_V_V_din = tmp_V_read_r_fu_117_ap_return;

assign p_imageB_in_V_V_din = tmp_V_11_read_r_fu_124_ap_return;

assign start_out = real_start;

assign tmp_V_11_read_r_fu_124_ap_start = tmp_V_11_read_r_fu_124_ap_start_reg;

assign tmp_V_read_r_fu_117_ap_start = tmp_V_read_r_fu_117_ap_start_reg;

endmodule //blendOpt83_Loop_1_pr
